%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 702
%%HiResBoundingBox: 0 0 2391.1199 702
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 702 re
W
q
[0.24 0 0 -0.24 0 702] cm
q
0 0 9962.5 2921.875 re
W*
q
[3.125472 0 0 3.124303 0.0289334 0] cm
/DeviceRGB {} CS
[0.2667 0.3373 0.4549] SC
/DeviceRGB {} cs
[0.2667 0.3373 0.4549] sc
0 0 3187.5 935.20856 re
f
Q
q
[146.058884 0 0 146.004257 12.486267 -291.11362] cm
/DeviceRGB {} CS
[0.9255 0.8824 0.898] SC
/DeviceRGB {} cs
[0.9255 0.8824 0.898] sc
20 14.5 m
20 14.5 17.700001 20 12 20 c
6.299999 20 4 14.5 4 14.5 c
4 14.5 8.1 15.5 11.9 15.5 c
15.699999 15.5 20 14.5 20 14.5 c
h
f
21.299999 8.5 m
17.1 7.2 13.8 4 12 4 c
10.2 4 6.9 7.2 2.7 8.5 c
2 8.7 1.7 9.5 2.1 10.1 c
3 11.3 4 11.4 4 12.8 c
4 12.8 8 13.8 12 13.8 c
16 13.8 20 12.8 20 12.8 c
20 11.400001 21 11.3 21.799999 10 c
22.200001 9.5 21.9 8.7 21.299999 8.5 c
h
12 12 m
10.9 12 10 10.1 10 9 c
10 9 10.9 8 12 8 c
13.1 8 14 9 14 9 c
14 10.1 13.1 12 12 12 c
h
f
Q
q
[59.5676 0 0 59.545319 3761.5439 706.70764] cm
/DeviceRGB {} CS
[0.9255 0.8824 0.898] SC
/DeviceRGB {} cs
[0.9255 0.8824 0.898] sc
4.04 6 m
6.24 6 7.32 7.22 7.32 9.46 c
7.32 11.28 l
7.32 13.52 6.24 14.74 4.04 14.74 c
3 14.74 l
3 20 l
0.8 20 l
0.8 6 l
4.04 6 l
h
4.04 8 m
3 8 l
3 12.74 l
4.04 12.74 l
4.74 12.74 5.12 12.42 5.12 11.42 c
5.12 9.32 l
5.12 8.32 4.74 8 4.04 8 c
4.04 8 l
h
10.36 9.22 m
10.36 16.780001 l
10.36 17.780001 10.799999 18.16 11.5 18.16 c
12.200001 18.16 12.64 17.780001 12.64 16.780001 c
12.64 9.220001 l
12.64 8.220001 12.200001 7.840001 11.5 7.840001 c
10.799999 7.840001 10.36 8.220001 10.36 9.220001 c
10.36 9.22 l
h
8.16 16.639999 m
8.16 9.359999 l
8.16 7.119999 9.34 5.839999 11.5 5.839999 c
13.66 5.839999 14.84 7.119999 14.84 9.359999 c
14.84 16.639999 l
14.84 18.879999 13.66 20.16 11.5 20.16 c
9.34 20.16 8.16 18.879999 8.16 16.639999 c
h
16.26 20 m
16.26 6 l
18.460001 6 l
18.460001 18 l
22.080002 18 l
22.080002 20 l
16.260002 20 l
16.26 20 l
h
23.040001 20 m
23.040001 6 l
25.240002 6 l
25.240002 20 l
23.040001 20 l
h
26.700001 6 m
32.940002 6 l
32.940002 7.96 l
28.760002 18 l
32.940002 18 l
32.940002 20 l
26.500002 20 l
26.500002 18.040001 l
30.680002 8.000001 l
26.700003 8.000001 l
26.700003 6.000001 l
26.700001 6 l
h
34.240002 20 m
34.240002 6 l
36.440002 6 l
36.440002 20 l
34.240002 20 l
h
42.919998 6 m
45.16 20 l
42.939999 20 l
42.559998 17.459999 l
39.859997 17.459999 l
39.479996 20 l
37.459995 20 l
39.699997 6 l
42.919998 6 l
h
41.18 8.48 m
40.139999 15.56 l
42.259998 15.56 l
41.219997 8.48 l
41.179996 8.48 l
41.18 8.48 l
h
49.279999 20 m
49.279999 6 l
52.759998 6 l
54.959999 6 56.039997 7.22 56.039997 9.46 c
56.039997 16.540001 l
56.039997 18.780001 54.959995 20 52.759998 20 c
49.279999 20 l
h
52.720001 8 m
51.48 8 l
51.48 18 l
52.720001 18 l
53.420002 18 53.84 17.639999 53.84 16.639999 c
53.84 9.359999 l
53.84 8.359999 53.420002 7.999999 52.720001 7.999999 c
52.720001 8 l
h
57.439999 20 m
57.439999 6 l
59.639999 6 l
59.639999 20 l
57.439999 20 l
h
64.059998 9.36 m
64.059998 7.12 65.159996 5.84 67.299995 5.84 c
69.439995 5.84 70.539993 7.12 70.539993 9.36 c
70.539993 9.799999 l
68.459991 9.799999 l
68.459991 9.219999 l
68.459991 8.219999 68.05999 7.839999 67.359993 7.839999 c
66.659996 7.839999 66.259995 8.219999 66.259995 9.219999 c
66.259995 10.24 66.699997 10.999999 68.139992 12.259999 c
69.979988 13.879999 70.55999 15.039999 70.55999 16.639999 c
70.55999 18.879999 69.439987 20.16 67.279991 20.16 c
65.119995 20.16 63.999992 18.879999 63.999992 16.639999 c
63.999992 15.78 l
66.079994 15.78 l
66.079994 16.779999 l
66.079994 17.779999 66.519997 18.139999 67.219994 18.139999 c
67.919991 18.139999 68.359993 17.779999 68.359993 16.779999 c
68.359993 15.759998 67.919991 14.999999 66.479996 13.739999 c
64.639999 12.119999 64.059998 10.959999 64.059998 9.359999 c
64.059998 9.36 l
h
71.18 8 m
71.18 6 l
77.980003 6 l
77.980003 8 l
75.68 8 l
75.68 20 l
73.480003 20 l
73.480003 8 l
71.18 8 l
h
83.059998 6 m
85.299995 20 l
83.079994 20 l
82.699997 17.459999 l
80 17.459999 l
79.620003 20 l
77.600006 20 l
79.840004 6 l
83.060005 6 l
83.059998 6 l
h
81.32 8.48 m
80.279999 15.56 l
82.400002 15.56 l
81.360001 8.48 l
81.32 8.48 l
h
84.919998 8 m
84.919998 6 l
91.720001 6 l
91.720001 8 l
89.419998 8 l
89.419998 20 l
87.220001 20 l
87.220001 8 l
84.919998 8 l
h
94.699997 9.22 m
94.699997 16.780001 l
94.699997 17.780001 95.139999 18.16 95.839996 18.16 c
96.539993 18.16 96.979996 17.780001 96.979996 16.780001 c
96.979996 9.220001 l
96.979996 8.220001 96.539993 7.840001 95.839996 7.840001 c
95.139999 7.840001 94.699997 8.220001 94.699997 9.220001 c
94.699997 9.22 l
h
92.5 16.639999 m
92.5 9.359999 l
92.5 7.119999 93.68 5.839999 95.839996 5.839999 c
97.999992 5.839999 99.179993 7.119999 99.179993 9.359999 c
99.179993 16.639999 l
99.179993 18.879999 97.999992 20.16 95.839996 20.16 c
93.68 20.16 92.5 18.879999 92.5 16.639999 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
